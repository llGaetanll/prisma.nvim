local to_fg_bg = function(lights, darks, variant)
	if variant == "light" then
		return { darks, lights }
	else
		return { lights, darks }
	end
end

local to_palette = function(colors, variant)
	local lights = colors.lights
	local darks = colors.darks
	local hues = colors.hues

	local fg_bg = to_fg_bg(lights, darks, variant)
	local fg = fg_bg[1]
	local bg = fg_bg[2]

	return {
		fg0 = fg[1],
		fg1 = fg[2],
		fg2 = fg[3],
		fg3 = fg[4],
		fg4 = fg[5],

		bg0 = bg[1],
		bg1 = bg[2],
		bg2 = bg[3],
		bg3 = bg[4],
		bg4 = bg[5],

		red = hues[1],
		green = hues[2],
		yellow = hues[3],
		blue = hues[4],
		purple = hues[5],
		aqua = hues[6],
		orange = hues[7],

		-- TODO: add more colors
		neutral_red = hues[1],
		neutral_green = hues[2],
		neutral_yellow = hues[3],
		neutral_blue = hues[4],
		neutral_purple = hues[5],
		neutral_aqua = hues[6],

		-- TODO: ibid
		dark_red = hues[1],
		dark_green = hues[2],
		dark_aqua = hues[6],

		-- TODO: ibid
		gray = fg[4],
	}
end

return function(config, colors)
	local palette = to_palette(colors, config.variant)

	if config.terminal_colors then
		local term_colors = {
			palette.bg0,
			palette.neutral_red,
			palette.neutral_green,
			palette.neutral_yellow,
			palette.neutral_blue,
			palette.neutral_purple,
			palette.neutral_aqua,
			palette.fg4,
			palette.gray,
			palette.red,
			palette.green,
			palette.yellow,
			palette.blue,
			palette.purple,
			palette.aqua,
			palette.fg1,
		}

		for i, color in ipairs(term_colors) do
			vim.g["terminal_color_" .. i - 1] = color
		end
	end

	local groups = {
		PrismaFg0 = { fg = palette.fg0 },
		PrismaFg1 = { fg = palette.fg1 },
		PrismaFg2 = { fg = palette.fg2 },
		PrismaFg3 = { fg = palette.fg3 },
		PrismaFg4 = { fg = palette.fg4 },
		PrismaGray = { fg = palette.gray },
		PrismaBg0 = { fg = palette.bg0 },
		PrismaBg1 = { fg = palette.bg1 },
		PrismaBg2 = { fg = palette.bg2 },
		PrismaBg3 = { fg = palette.bg3 },
		PrismaBg4 = { fg = palette.bg4 },
		PrismaRed = { fg = palette.red },
		PrismaRedBold = { fg = palette.red, bold = config.bold },
		PrismaGreen = { fg = palette.green },
		PrismaGreenBold = { fg = palette.green, bold = config.bold },
		PrismaYellow = { fg = palette.yellow },
		PrismaYellowBold = { fg = palette.yellow, bold = config.bold },
		PrismaBlue = { fg = palette.blue },
		PrismaBlueBold = { fg = palette.blue, bold = config.bold },
		PrismaPurple = { fg = palette.purple },
		PrismaPurpleBold = { fg = palette.purple, bold = config.bold },
		PrismaAqua = { fg = palette.aqua },
		PrismaAquaBold = { fg = palette.aqua, bold = config.bold },
		PrismaOrange = { fg = palette.orange },
		PrismaOrangeBold = { fg = palette.orange, bold = config.bold },
		PrismaRedSign = config.transparent_mode and { fg = palette.red, reverse = config.invert_signs }
			or { fg = palette.red, bg = palette.bg1, reverse = config.invert_signs },
		PrismaGreenSign = config.transparent_mode and { fg = palette.green, reverse = config.invert_signs }
			or { fg = palette.green, bg = palette.bg1, reverse = config.invert_signs },
		PrismaYellowSign = config.transparent_mode and { fg = palette.yellow, reverse = config.invert_signs }
			or { fg = palette.yellow, bg = palette.bg1, reverse = config.invert_signs },
		PrismaBlueSign = config.transparent_mode and { fg = palette.blue, reverse = config.invert_signs }
			or { fg = palette.blue, bg = palette.bg1, reverse = config.invert_signs },
		PrismaPurpleSign = config.transparent_mode and { fg = palette.purple, reverse = config.invert_signs }
			or { fg = palette.purple, bg = palette.bg1, reverse = config.invert_signs },
		PrismaAquaSign = config.transparent_mode and { fg = palette.aqua, reverse = config.invert_signs }
			or { fg = palette.aqua, bg = palette.bg1, reverse = config.invert_signs },
		PrismaOrangeSign = config.transparent_mode and { fg = palette.orange, reverse = config.invert_signs }
			or { fg = palette.orange, bg = palette.bg1, reverse = config.invert_signs },
		PrismaRedUnderline = { undercurl = config.undercurl, sp = palette.red },
		PrismaGreenUnderline = { undercurl = config.undercurl, sp = palette.green },
		PrismaYellowUnderline = { undercurl = config.undercurl, sp = palette.yellow },
		PrismaBlueUnderline = { undercurl = config.undercurl, sp = palette.blue },
		PrismaPurpleUnderline = { undercurl = config.undercurl, sp = palette.purple },
		PrismaAquaUnderline = { undercurl = config.undercurl, sp = palette.aqua },
		PrismaOrangeUnderline = { undercurl = config.undercurl, sp = palette.orange },
		Normal = config.transparent_mode and { fg = palette.fg1, bg = nil } or { fg = palette.fg1, bg = palette.bg1 },
		NormalFloat = config.transparent_mode and { fg = palette.fg1, bg = nil }
			or { fg = palette.fg1, bg = palette.bg1 },
		NormalNC = config.dim_inactive and { fg = palette.fg0, bg = palette.bg1 } or { link = "Normal" },
		CursorLine = { bg = palette.bg1 },
		CursorColumn = { link = "CursorLine" },
		TabLineFill = { fg = palette.bg4, bg = palette.bg1, reverse = config.invert_tabline },
		TabLineSel = { fg = palette.green, bg = palette.bg1, reverse = config.invert_tabline },
		TabLine = { link = "TabLineFill" },
		MatchParen = { bg = palette.bg3, bold = config.bold },
		ColorColumn = { bg = palette.bg1 },
		Conceal = { fg = palette.blue },
		CursorLineNr = { fg = palette.yellow, bg = palette.bg1 },
		NonText = { link = "PrismaBg2" },
		SpecialKey = { link = "PrismaFg4" },
		Visual = { bg = palette.bg3, reverse = config.invert_selection },
		VisualNOS = { link = "Visual" },
		Search = { fg = palette.yellow, bg = palette.bg1, reverse = config.inverse },
		IncSearch = { fg = palette.orange, bg = palette.bg1, reverse = config.inverse },
		CurSearch = { link = "IncSearch" },
		QuickFixLine = { fg = palette.bg1, bg = palette.yellow, bold = config.bold },
		Underlined = { fg = palette.blue, underline = config.underline },
		StatusLine = { fg = palette.bg2, bg = palette.fg1, reverse = config.inverse },
		StatusLineNC = { fg = palette.bg1, bg = palette.fg4, reverse = config.inverse },
		WinBar = { fg = palette.fg4, bg = palette.bg1 },
		WinBarNC = { fg = palette.fg3, bg = palette.bg1 },
		WinSeparator = config.transparent_mode and { fg = palette.bg3, bg = nil }
			or { fg = palette.bg3, bg = palette.bg1 },
		WildMenu = { fg = palette.blue, bg = palette.bg2, bold = config.bold },
		Directory = { link = "PrismaBlueBold" },
		Title = { link = "PrismaGreenBold" },
		ErrorMsg = { fg = palette.bg1, bg = palette.red, bold = config.bold },
		MoreMsg = { link = "PrismaYellowBold" },
		ModeMsg = { link = "PrismaYellowBold" },
		Question = { link = "PrismaOrangeBold" },
		WarningMsg = { link = "PrismaRedBold" },
		LineNr = { fg = palette.bg4 },
		SignColumn = { bg = nil }, -- config.transparent_mode and { bg = nil } or { bg = palette.bg1 },
		Folded = { fg = palette.gray, bg = palette.bg1, italic = config.italic.folds },
		FoldColumn = config.transparent_mode and { fg = palette.gray, bg = nil }
			or { fg = palette.gray, bg = palette.bg1 },
		Cursor = { reverse = config.inverse },
		vCursor = { link = "Cursor" },
		iCursor = { link = "Cursor" },
		lCursor = { link = "Cursor" },
		Special = { link = "PrismaOrange" },
		Comment = { fg = palette.gray, italic = config.italic.comments },
		Todo = { fg = palette.bg1, bg = palette.yellow, bold = config.bold, italic = config.italic.comments },
		Done = { fg = palette.orange, bold = config.bold, italic = config.italic.comments },
		Error = { fg = palette.red, bold = config.bold, reverse = config.inverse },
		Statement = { link = "PrismaRed" },
		Conditional = { link = "PrismaRed" },
		Repeat = { link = "PrismaRed" },
		Label = { link = "PrismaRed" },
		Exception = { link = "PrismaRed" },
		Operator = { fg = palette.orange, italic = config.italic.operators },
		Keyword = { link = "PrismaRed" },
		Identifier = { link = "PrismaBlue" },
		Function = { link = "PrismaGreenBold" },
		PreProc = { link = "PrismaAqua" },
		Include = { link = "PrismaAqua" },
		Define = { link = "PrismaAqua" },
		Macro = { link = "PrismaAqua" },
		PreCondit = { link = "PrismaAqua" },
		Constant = { link = "PrismaPurple" },
		Character = { link = "PrismaPurple" },
		String = { fg = palette.green, italic = config.italic.strings },
		Boolean = { link = "PrismaPurple" },
		Number = { link = "PrismaPurple" },
		Float = { link = "PrismaPurple" },
		Type = { link = "PrismaYellow" },
		StorageClass = { link = "PrismaOrange" },
		Structure = { link = "PrismaAqua" },
		Typedef = { link = "PrismaYellow" },
		Pmenu = { bg = palette.bg1, fg = palette.bg3, bold = config.bold },
		PmenuSel = { bg = palette.bg3, fg = palette.bg3 },
		-- Pmenu = { fg = palette.bg4, bg = palette.bg1 }, -- TODO: check
		-- PmenuSel = { fg = palette.fg1, bg = palette.bg3, bold = config.bold },
		PmenuSbar = { bg = palette.bg4 },
		PmenuThumb = { bg = palette.bg4 },
		DiffDelete = { bg = palette.dark_red },
		DiffAdd = { bg = palette.dark_green },
		DiffChange = { bg = palette.dark_aqua },
		DiffText = { bg = palette.yellow, fg = palette.bg1 },
		SpellCap = { link = "PrismaBlueUnderline" },
		SpellBad = { link = "PrismaRedUnderline" },
		SpellLocal = { link = "PrismaAquaUnderline" },
		SpellRare = { link = "PrismaPurpleUnderline" },
		Whitespace = { fg = palette.bg2 },
		DiagnosticError = { link = "PrismaRed" },
		DiagnosticSignError = { link = "PrismaRedSign", bg = nil },
		DiagnosticUnderlineError = { link = "PrismaRedUnderline" },
		DiagnosticWarn = { link = "PrismaYellow" },
		DiagnosticSignWarn = { link = "PrismaYellowSign", bg = nil },
		DiagnosticUnderlineWarn = { link = "PrismaYellowUnderline" },
		DiagnosticInfo = { link = "PrismaBlue" },
		DiagnosticSignInfo = { link = "PrismaBlueSign", bg = nil },
		DiagnosticUnderlineInfo = { link = "PrismaBlueUnderline" },
		DiagnosticHint = { link = "PrismaAqua" },
		DiagnosticSignHint = { link = "PrismaAquaSign", bg = nil },
		DiagnosticUnderlineHint = { link = "PrismaAquaUnderline" },
		DiagnosticFloatingError = { link = "PrismaRed" },
		DiagnosticFloatingWarn = { link = "PrismaOrange" },
		DiagnosticFloatingInfo = { link = "PrismaBlue" },
		DiagnosticFloatingHint = { link = "PrismaAqua" },
		DiagnosticVirtualTextError = { link = "PrismaRed" },
		DiagnosticVirtualTextWarn = { link = "PrismaYellow" },
		DiagnosticVirtualTextInfo = { link = "PrismaBlue" },
		DiagnosticVirtualTextHint = { link = "PrismaAqua" },
		DiagnosticOk = { link = "PrismaGreenSign" },
		LspReferenceRead = { link = "PrismaYellowBold" },
		LspReferenceText = { link = "PrismaYellowBold" },
		LspReferenceWrite = { link = "PrismaOrangeBold" },
		LspCodeLens = { link = "PrismaGray" },
		LspSignatureActiveParameter = { link = "Search" },
		gitcommitSelectedFile = { link = "PrismaGreen" },
		gitcommitDiscardedFile = { link = "PrismaRed" },
		GitSignsAdd = { link = "PrismaGreenSign", bg = nil },
		GitSignsChange = { link = "PrismaAquaSign", bg = nil },
		GitSignsDelete = { link = "PrismaRedSign", bg = nil },
		NvimTreeWinSeparator = { fg = palette.bg1, bg = palette.bg1 },
		NvimTreeHeader = { fg = palette.red, bg = palette.bg0, bold = true, italic = true },
		NvimTreeNormal = { bg = palette.bg0 },
		NvimTreeEndOfBuffer = { bg = palette.bg0 },
		NvimTreeSymlink = { fg = palette.neutral_aqua },
		NvimTreeRootFolder = { fg = palette.neutral_purple, bold = true },
		NvimTreeFolderIcon = { fg = palette.neutral_blue, bold = true },
		NvimTreeFileIcon = { fg = palette.light2 },
		NvimTreeExecFile = { fg = palette.neutral_green, bold = true },
		NvimTreeOpenedFile = { fg = palette.bright_red, bold = true },
		NvimTreeSpecialFile = { fg = palette.neutral_yellow, bold = true, underline = true },
		NvimTreeImageFile = { fg = palette.neutral_purple },
		NvimTreeIndentMarker = { fg = palette.bg1 },
		NvimTreeGitDirty = { fg = palette.neutral_yellow },
		NvimTreeGitStaged = { fg = palette.neutral_yellow },
		NvimTreeGitMerge = { fg = palette.neutral_purple },
		NvimTreeGitRenamed = { fg = palette.neutral_purple },
		NvimTreeGitNew = { fg = palette.neutral_yellow },
		NvimTreeGitDeleted = { fg = palette.neutral_red },
		NvimTreeWindowPicker = { bg = palette.faded_aqua },
		debugPC = { bg = palette.faded_blue },
		debugBreakpoint = { link = "PrismaRedSign" },
		StartifyBracket = { link = "PrismaFg3" },
		StartifyFile = { link = "PrismaFg1" },
		StartifyNumber = { link = "PrismaBlue" },
		StartifyPath = { link = "PrismaGray" },
		StartifySlash = { link = "PrismaGray" },
		StartifySection = { link = "PrismaYellow" },
		StartifySpecial = { link = "PrismaBg2" },
		StartifyHeader = { link = "PrismaOrange" },
		StartifyFooter = { link = "PrismaBg2" },
		StartifyVar = { link = "StartifyPath" },
		StartifySelect = { link = "Title" },
		DirvishPathTail = { link = "PrismaAqua" },
		DirvishArg = { link = "PrismaYellow" },
		netrwDir = { link = "PrismaAqua" },
		netrwClassify = { link = "PrismaAqua" },
		netrwLink = { link = "PrismaGray" },
		netrwSymLink = { link = "PrismaFg1" },
		netrwExe = { link = "PrismaYellow" },
		netrwComment = { link = "PrismaGray" },
		netrwList = { link = "PrismaBlue" },
		netrwHelpCmd = { link = "PrismaAqua" },
		netrwCmdSep = { link = "PrismaFg3" },
		netrwVersion = { link = "PrismaGreen" },
		NERDTreeDir = { link = "PrismaAqua" },
		NERDTreeDirSlash = { link = "PrismaAqua" },
		NERDTreeOpenable = { link = "PrismaOrange" },
		NERDTreeClosable = { link = "PrismaOrange" },
		NERDTreeFile = { link = "PrismaFg1" },
		NERDTreeExecFile = { link = "PrismaYellow" },
		NERDTreeUp = { link = "PrismaGray" },
		NERDTreeCWD = { link = "PrismaGreen" },
		NERDTreeHelp = { link = "PrismaFg1" },
		NERDTreeToggleOn = { link = "PrismaGreen" },
		NERDTreeToggleOff = { link = "PrismaRed" },
		CocErrorSign = { link = "PrismaRedSign" },
		CocWarningSign = { link = "PrismaOrangeSign" },
		CocInfoSign = { link = "PrismaBlueSign" },
		CocHintSign = { link = "PrismaAquaSign" },
		CocErrorFloat = { link = "PrismaRed" },
		CocWarningFloat = { link = "PrismaOrange" },
		CocInfoFloat = { link = "PrismaBlue" },
		CocHintFloat = { link = "PrismaAqua" },
		CocDiagnosticsError = { link = "PrismaRed" },
		CocDiagnosticsWarning = { link = "PrismaOrange" },
		CocDiagnosticsInfo = { link = "PrismaBlue" },
		CocDiagnosticsHint = { link = "PrismaAqua" },
		CocSelectedText = { link = "PrismaRed" },
		CocMenuSel = { link = "PmenuSel" },
		CocCodeLens = { link = "PrismaGray" },
		CocErrorHighlight = { link = "PrismaRedUnderline" },
		CocWarningHighlight = { link = "PrismaOrangeUnderline" },
		CocInfoHighlight = { link = "PrismaBlueUnderline" },
		CocHintHighlight = { link = "PrismaAquaUnderline" },

		-- TelescopeNormal = { link = "PrismaFg1" },
		-- TelescopeSelection = { link = "PrismaOrangeBold" },
		TelescopeSelectionCaret = { link = "PrismaRed" },
		TelescopeMultiSelection = { link = "PrismaGray" },
		-- TelescopeBorder = { link = "TelescopeNormal" },
		-- TelescopePromptBorder = { link = "TelescopeNormal" },
		-- TelescopeResultsBorder = { link = "TelescopeNormal" },
		-- TelescopePreviewBorder = { link = "TelescopeNormal" },
		TelescopeMatching = { link = "PrismaBlue" },
		-- TelescopePromptPrefix = { link = "PrismaRed" },
		TelescopePrompt = { link = "TelescopeNormal" },

		TelescopeBorder = { fg = palette.bg0, bg = palette.bg0 },
		TelescopeNormal = { bg = palette.bg0 },

		-- top left
		TelescopePromptBorder = { fg = palette.bg3, bg = palette.bg3 },
		TelescopePromptNormal = { fg = palette.red, bg = palette.bg3 },
		TelescopePromptPrefix = { fg = palette.red, bg = palette.bg3, bold = true },
		TelescopePromptTitle = { fg = palette.bg0, bg = palette.red, bold = true },
		TelescopePromptCounter = { fg = palette.fg4, bg = palette.bg3 },

		-- bottom left
		TelescopeResultsTitle = { fg = palette.bg2, bg = palette.aqua, bold = true },
		TelescopeResultsBorder = { fg = palette.bg2, bg = palette.bg2 },
		TelescopeResultsNormal = { bg = palette.bg2 },

		-- right
		TelescopePreviewTitle = { fg = palette.bg0, bg = palette.green, bold = true },
		TelescopePreviewBorder = { fg = palette.bg0, bg = palette.bg0 },

		TelescopeSelection = { bg = palette.bg0 },

		CmpItemAbbr = { link = "PrismaFg0" },
		CmpItemAbbrDeprecated = { link = "PrismaFg1" },
		CmpItemAbbrMatch = { link = "PrismaBlueBold" },
		CmpItemAbbrMatchFuzzy = { link = "PrismaBlueUnderline" },
		CmpItemMenu = { link = "PrismaGray" },
		CmpItemKindText = { link = "PrismaOrange" },
		CmpItemKindVariable = { link = "PrismaOrange" },
		CmpItemKindMethod = { link = "PrismaBlue" },
		CmpItemKindFunction = { link = "PrismaBlue" },
		CmpItemKindConstructor = { link = "PrismaYellow" },
		CmpItemKindUnit = { link = "PrismaBlue" },
		CmpItemKindField = { link = "PrismaBlue" },
		CmpItemKindClass = { link = "PrismaYellow" },
		CmpItemKindInterface = { link = "PrismaYellow" },
		CmpItemKindModule = { link = "PrismaBlue" },
		CmpItemKindProperty = { link = "PrismaBlue" },
		CmpItemKindValue = { link = "PrismaOrange" },
		CmpItemKindEnum = { link = "PrismaYellow" },
		CmpItemKindOperator = { link = "PrismaYellow" },
		CmpItemKindKeyword = { link = "PrismaPurple" },
		CmpItemKindEvent = { link = "PrismaPurple" },
		CmpItemKindReference = { link = "PrismaPurple" },
		CmpItemKindColor = { link = "PrismaPurple" },
		CmpItemKindSnippet = { link = "PrismaGreen" },
		CmpItemKindFile = { link = "PrismaBlue" },
		CmpItemKindFolder = { link = "PrismaBlue" },
		CmpItemKindEnumMember = { link = "PrismaAqua" },
		CmpItemKindConstant = { link = "PrismaOrange" },
		CmpItemKindStruct = { link = "PrismaYellow" },
		CmpItemKindTypeParameter = { link = "PrismaYellow" },
		diffAdded = { link = "DiffAdd" },
		diffRemoved = { link = "DiffDelete" },
		diffChanged = { link = "DiffChange" },
		diffFile = { link = "PrismaOrange" },
		diffNewFile = { link = "PrismaYellow" },
		diffOldFile = { link = "PrismaOrange" },
		diffLine = { link = "PrismaBlue" },
		diffIndexLine = { link = "diffChanged" },
		NavicIconsFile = { link = "PrismaBlue" },
		NavicIconsModule = { link = "PrismaOrange" },
		NavicIconsNamespace = { link = "PrismaBlue" },
		NavicIconsPackage = { link = "PrismaAqua" },
		NavicIconsClass = { link = "PrismaYellow" },
		NavicIconsMethod = { link = "PrismaBlue" },
		NavicIconsProperty = { link = "PrismaAqua" },
		NavicIconsField = { link = "PrismaPurple" },
		NavicIconsConstructor = { link = "PrismaBlue" },
		NavicIconsEnum = { link = "PrismaPurple" },
		NavicIconsInterface = { link = "PrismaGreen" },
		NavicIconsFunction = { link = "PrismaBlue" },
		NavicIconsVariable = { link = "PrismaPurple" },
		NavicIconsConstant = { link = "PrismaOrange" },
		NavicIconsString = { link = "PrismaGreen" },
		NavicIconsNumber = { link = "PrismaOrange" },
		NavicIconsBoolean = { link = "PrismaOrange" },
		NavicIconsArray = { link = "PrismaOrange" },
		NavicIconsObject = { link = "PrismaOrange" },
		NavicIconsKey = { link = "PrismaAqua" },
		NavicIconsNull = { link = "PrismaOrange" },
		NavicIconsEnumMember = { link = "PrismaYellow" },
		NavicIconsStruct = { link = "PrismaPurple" },
		NavicIconsEvent = { link = "PrismaYellow" },
		NavicIconsOperator = { link = "PrismaRed" },
		NavicIconsTypeParameter = { link = "PrismaRed" },
		NavicText = { link = "PrismaWhite" },
		NavicSeparator = { link = "PrismaWhite" },
		htmlTag = { link = "PrismaAquaBold" },
		htmlEndTag = { link = "PrismaAquaBold" },
		htmlTagName = { link = "PrismaBlue" },
		htmlArg = { link = "PrismaOrange" },
		htmlTagN = { link = "PrismaFg1" },
		htmlSpecialTagName = { link = "PrismaBlue" },
		htmlLink = { fg = palette.fg4, underline = config.underline },
		htmlSpecialChar = { link = "PrismaRed" },
		htmlBold = { fg = palette.fg0, bg = palette.bg1, bold = config.bold },
		htmlBoldUnderline = { fg = palette.fg0, bg = palette.bg1, bold = config.bold, underline = config.underline },
		htmlBoldItalic = { fg = palette.fg0, bg = palette.bg1, bold = config.bold, italic = true },
		htmlBoldUnderlineItalic = {
			fg = palette.fg0,
			bg = palette.bg1,
			bold = config.bold,
			italic = true,
			underline = config.underline,
		},
		htmlUnderline = { fg = palette.fg0, bg = palette.bg1, underline = config.underline },
		htmlUnderlineItalic = {
			fg = palette.fg0,
			bg = palette.bg1,
			italic = true,
			underline = config.underline,
		},
		htmlItalic = { fg = palette.fg0, bg = palette.bg1, italic = true },
		xmlTag = { link = "PrismaAquaBold" },
		xmlEndTag = { link = "PrismaAquaBold" },
		xmlTagName = { link = "PrismaBlue" },
		xmlEqual = { link = "PrismaBlue" },
		docbkKeyword = { link = "PrismaAquaBold" },
		xmlDocTypeDecl = { link = "PrismaGray" },
		xmlDocTypeKeyword = { link = "PrismaPurple" },
		xmlCdataStart = { link = "PrismaGray" },
		xmlCdataCdata = { link = "PrismaPurple" },
		dtdFunction = { link = "PrismaGray" },
		dtdTagName = { link = "PrismaPurple" },
		xmlAttrib = { link = "PrismaOrange" },
		xmlProcessingDelim = { link = "PrismaGray" },
		dtdParamEntityPunct = { link = "PrismaGray" },
		dtdParamEntityDPunct = { link = "PrismaGray" },
		xmlAttribPunct = { link = "PrismaGray" },
		xmlEntity = { link = "PrismaRed" },
		xmlEntityPunct = { link = "PrismaRed" },
		clojureKeyword = { link = "PrismaBlue" },
		clojureCond = { link = "PrismaOrange" },
		clojureSpecial = { link = "PrismaOrange" },
		clojureDefine = { link = "PrismaOrange" },
		clojureFunc = { link = "PrismaYellow" },
		clojureRepeat = { link = "PrismaYellow" },
		clojureCharacter = { link = "PrismaAqua" },
		clojureStringEscape = { link = "PrismaAqua" },
		clojureException = { link = "PrismaRed" },
		clojureRegexp = { link = "PrismaAqua" },
		clojureRegexpEscape = { link = "PrismaAqua" },
		clojureRegexpCharClass = { fg = palette.fg3, bold = config.bold },
		clojureRegexpMod = { link = "clojureRegexpCharClass" },
		clojureRegexpQuantifier = { link = "clojureRegexpCharClass" },
		clojureParen = { link = "PrismaFg3" },
		clojureAnonArg = { link = "PrismaYellow" },
		clojureVariable = { link = "PrismaBlue" },
		clojureMacro = { link = "PrismaOrange" },
		clojureMeta = { link = "PrismaYellow" },
		clojureDeref = { link = "PrismaYellow" },
		clojureQuote = { link = "PrismaYellow" },
		clojureUnquote = { link = "PrismaYellow" },
		cOperator = { link = "PrismaPurple" },
		cppOperator = { link = "PrismaPurple" },
		cStructure = { link = "PrismaOrange" },
		pythonBuiltin = { link = "PrismaOrange" },
		pythonBuiltinObj = { link = "PrismaOrange" },
		pythonBuiltinFunc = { link = "PrismaOrange" },
		pythonFunction = { link = "PrismaAqua" },
		pythonDecorator = { link = "PrismaRed" },
		pythonInclude = { link = "PrismaBlue" },
		pythonImport = { link = "PrismaBlue" },
		pythonRun = { link = "PrismaBlue" },
		pythonCoding = { link = "PrismaBlue" },
		pythonOperator = { link = "PrismaRed" },
		pythonException = { link = "PrismaRed" },
		pythonExceptions = { link = "PrismaPurple" },
		pythonBoolean = { link = "PrismaPurple" },
		pythonDot = { link = "PrismaFg3" },
		pythonConditional = { link = "PrismaRed" },
		pythonRepeat = { link = "PrismaRed" },
		pythonDottedName = { link = "PrismaGreenBold" },
		cssBraces = { link = "PrismaBlue" },
		cssFunctionName = { link = "PrismaYellow" },
		cssIdentifier = { link = "PrismaOrange" },
		cssClassName = { link = "PrismaGreen" },
		cssColor = { link = "PrismaBlue" },
		cssSelectorOp = { link = "PrismaBlue" },
		cssSelectorOp2 = { link = "PrismaBlue" },
		cssImportant = { link = "PrismaGreen" },
		cssVendor = { link = "PrismaFg1" },
		cssTextProp = { link = "PrismaAqua" },
		cssAnimationProp = { link = "PrismaAqua" },
		cssUIProp = { link = "PrismaYellow" },
		cssTransformProp = { link = "PrismaAqua" },
		cssTransitionProp = { link = "PrismaAqua" },
		cssPrintProp = { link = "PrismaAqua" },
		cssPositioningProp = { link = "PrismaYellow" },
		cssBoxProp = { link = "PrismaAqua" },
		cssFontDescriptorProp = { link = "PrismaAqua" },
		cssFlexibleBoxProp = { link = "PrismaAqua" },
		cssBorderOutlineProp = { link = "PrismaAqua" },
		cssBackgroundProp = { link = "PrismaAqua" },
		cssMarginProp = { link = "PrismaAqua" },
		cssListProp = { link = "PrismaAqua" },
		cssTableProp = { link = "PrismaAqua" },
		cssFontProp = { link = "PrismaAqua" },
		cssPaddingProp = { link = "PrismaAqua" },
		cssDimensionProp = { link = "PrismaAqua" },
		cssRenderProp = { link = "PrismaAqua" },
		cssColorProp = { link = "PrismaAqua" },
		cssGeneratedContentProp = { link = "PrismaAqua" },
		javaScriptBraces = { link = "PrismaFg1" },
		javaScriptFunction = { link = "PrismaAqua" },
		javaScriptIdentifier = { link = "PrismaRed" },
		javaScriptMember = { link = "PrismaBlue" },
		javaScriptNumber = { link = "PrismaPurple" },
		javaScriptNull = { link = "PrismaPurple" },
		javaScriptParens = { link = "PrismaFg3" },
		typescriptReserved = { link = "PrismaAqua" },
		typescriptLabel = { link = "PrismaAqua" },
		typescriptFuncKeyword = { link = "PrismaAqua" },
		typescriptIdentifier = { link = "PrismaOrange" },
		typescriptBraces = { link = "PrismaFg1" },
		typescriptEndColons = { link = "PrismaFg1" },
		typescriptDOMObjects = { link = "PrismaFg1" },
		typescriptAjaxMethods = { link = "PrismaFg1" },
		typescriptLogicSymbols = { link = "PrismaFg1" },
		typescriptDocSeeTag = { link = "Comment" },
		typescriptDocParam = { link = "Comment" },
		typescriptDocTags = { link = "vimCommentTitle" },
		typescriptGlobalObjects = { link = "PrismaFg1" },
		typescriptParens = { link = "PrismaFg3" },
		typescriptOpSymbols = { link = "PrismaFg3" },
		typescriptHtmlElemProperties = { link = "PrismaFg1" },
		typescriptNull = { link = "PrismaPurple" },
		typescriptInterpolationDelimiter = { link = "PrismaAqua" },
		purescriptModuleKeyword = { link = "PrismaAqua" },
		purescriptModuleName = { link = "PrismaFg1" },
		purescriptWhere = { link = "PrismaAqua" },
		purescriptDelimiter = { link = "PrismaFg4" },
		purescriptType = { link = "PrismaFg1" },
		purescriptImportKeyword = { link = "PrismaAqua" },
		purescriptHidingKeyword = { link = "PrismaAqua" },
		purescriptAsKeyword = { link = "PrismaAqua" },
		purescriptStructure = { link = "PrismaAqua" },
		purescriptOperator = { link = "PrismaBlue" },
		purescriptTypeVar = { link = "PrismaFg1" },
		purescriptConstructor = { link = "PrismaFg1" },
		purescriptFunction = { link = "PrismaFg1" },
		purescriptConditional = { link = "PrismaOrange" },
		purescriptBacktick = { link = "PrismaOrange" },
		coffeeExtendedOp = { link = "PrismaFg3" },
		coffeeSpecialOp = { link = "PrismaFg3" },
		coffeeCurly = { link = "PrismaOrange" },
		coffeeParen = { link = "PrismaFg3" },
		coffeeBracket = { link = "PrismaOrange" },
		rubyStringDelimiter = { link = "PrismaGreen" },
		rubyInterpolationDelimiter = { link = "PrismaAqua" },
		rubyDefinedOperator = { link = "rubyKeyword" },
		objcTypeModifier = { link = "PrismaRed" },
		objcDirective = { link = "PrismaBlue" },
		goDirective = { link = "PrismaAqua" },
		goConstants = { link = "PrismaPurple" },
		goDeclaration = { link = "PrismaRed" },
		goDeclType = { link = "PrismaBlue" },
		goBuiltins = { link = "PrismaOrange" },
		luaIn = { link = "PrismaRed" },
		luaFunction = { link = "PrismaAqua" },
		luaTable = { link = "PrismaOrange" },
		moonSpecialOp = { link = "PrismaFg3" },
		moonExtendedOp = { link = "PrismaFg3" },
		moonFunction = { link = "PrismaFg3" },
		moonObject = { link = "PrismaYellow" },
		javaAnnotation = { link = "PrismaBlue" },
		javaDocTags = { link = "PrismaAqua" },
		javaCommentTitle = { link = "vimCommentTitle" },
		javaParen = { link = "PrismaFg3" },
		javaParen1 = { link = "PrismaFg3" },
		javaParen2 = { link = "PrismaFg3" },
		javaParen3 = { link = "PrismaFg3" },
		javaParen4 = { link = "PrismaFg3" },
		javaParen5 = { link = "PrismaFg3" },
		javaOperator = { link = "PrismaOrange" },
		javaVarArg = { link = "PrismaGreen" },
		elixirDocString = { link = "Comment" },
		elixirStringDelimiter = { link = "PrismaGreen" },
		elixirInterpolationDelimiter = { link = "PrismaAqua" },
		elixirModuleDeclaration = { link = "PrismaYellow" },
		scalaNameDefinition = { link = "PrismaFg1" },
		scalaCaseFollowing = { link = "PrismaFg1" },
		scalaCapitalWord = { link = "PrismaFg1" },
		scalaTypeExtension = { link = "PrismaFg1" },
		scalaKeyword = { link = "PrismaRed" },
		scalaKeywordModifier = { link = "PrismaRed" },
		scalaSpecial = { link = "PrismaAqua" },
		scalaOperator = { link = "PrismaFg1" },
		scalaTypeDeclaration = { link = "PrismaYellow" },
		scalaTypeTypePostDeclaration = { link = "PrismaYellow" },
		scalaInstanceDeclaration = { link = "PrismaFg1" },
		scalaInterpolation = { link = "PrismaAqua" },
		markdownItalic = { fg = palette.fg3, italic = true },
		markdownBold = { fg = palette.fg3, bold = config.bold },
		markdownBoldItalic = { fg = palette.fg3, bold = config.bold, italic = true },
		markdownH1 = { link = "PrismaGreenBold" },
		markdownH2 = { link = "PrismaGreenBold" },
		markdownH3 = { link = "PrismaYellowBold" },
		markdownH4 = { link = "PrismaYellowBold" },
		markdownH5 = { link = "PrismaYellow" },
		markdownH6 = { link = "PrismaYellow" },
		markdownCode = { link = "PrismaAqua" },
		markdownCodeBlock = { link = "PrismaAqua" },
		markdownCodeDelimiter = { link = "PrismaAqua" },
		markdownBlockquote = { link = "PrismaGray" },
		markdownListMarker = { link = "PrismaGray" },
		markdownOrderedListMarker = { link = "PrismaGray" },
		markdownRule = { link = "PrismaGray" },
		markdownHeadingRule = { link = "PrismaGray" },
		markdownUrlDelimiter = { link = "PrismaFg3" },
		markdownLinkDelimiter = { link = "PrismaFg3" },
		markdownLinkTextDelimiter = { link = "PrismaFg3" },
		markdownHeadingDelimiter = { link = "PrismaOrange" },
		markdownUrl = { link = "PrismaPurple" },
		markdownUrlTitleDelimiter = { link = "PrismaGreen" },
		markdownLinkText = { fg = palette.gray, underline = config.underline },
		markdownIdDeclaration = { link = "markdownLinkText" },
		haskellType = { link = "PrismaBlue" },
		haskellIdentifier = { link = "PrismaAqua" },
		haskellSeparator = { link = "PrismaFg4" },
		haskellDelimiter = { link = "PrismaOrange" },
		haskellOperators = { link = "PrismaPurple" },
		haskellBacktick = { link = "PrismaOrange" },
		haskellStatement = { link = "PrismaPurple" },
		haskellConditional = { link = "PrismaPurple" },
		haskellLet = { link = "PrismaRed" },
		haskellDefault = { link = "PrismaRed" },
		haskellWhere = { link = "PrismaRed" },
		haskellBottom = { link = "PrismaRedBold" },
		haskellImportKeywords = { link = "PrismaPurpleBold" },
		haskellDeclKeyword = { link = "PrismaOrange" },
		haskellDecl = { link = "PrismaOrange" },
		haskellDeriving = { link = "PrismaPurple" },
		haskellAssocType = { link = "PrismaAqua" },
		haskellNumber = { link = "PrismaAqua" },
		haskellPragma = { link = "PrismaRedBold" },
		haskellTH = { link = "PrismaAquaBold" },
		haskellForeignKeywords = { link = "PrismaGreen" },
		haskellKeyword = { link = "PrismaRed" },
		haskellFloat = { link = "PrismaAqua" },
		haskellInfix = { link = "PrismaPurple" },
		haskellQuote = { link = "PrismaGreenBold" },
		haskellShebang = { link = "PrismaYellowBold" },
		haskellLiquid = { link = "PrismaPurpleBold" },
		haskellQuasiQuoted = { link = "PrismaBlueBold" },
		haskellRecursiveDo = { link = "PrismaPurple" },
		haskellQuotedType = { link = "PrismaRed" },
		haskellPreProc = { link = "PrismaFg4" },
		haskellTypeRoles = { link = "PrismaRedBold" },
		haskellTypeForall = { link = "PrismaRed" },
		haskellPatternKeyword = { link = "PrismaBlue" },
		jsonKeyword = { link = "PrismaGreen" },
		jsonQuote = { link = "PrismaGreen" },
		jsonBraces = { link = "PrismaFg1" },
		jsonString = { link = "PrismaFg1" },
		mailQuoted1 = { link = "PrismaAqua" },
		mailQuoted2 = { link = "PrismaPurple" },
		mailQuoted3 = { link = "PrismaYellow" },
		mailQuoted4 = { link = "PrismaGreen" },
		mailQuoted5 = { link = "PrismaRed" },
		mailQuoted6 = { link = "PrismaOrange" },
		mailSignature = { link = "Comment" },
		csBraces = { link = "PrismaFg1" },
		csEndColon = { link = "PrismaFg1" },
		csLogicSymbols = { link = "PrismaFg1" },
		csParens = { link = "PrismaFg3" },
		csOpSymbols = { link = "PrismaFg3" },
		csInterpolationDelimiter = { link = "PrismaFg3" },
		csInterpolationAlignDel = { link = "PrismaAquaBold" },
		csInterpolationFormat = { link = "PrismaAqua" },
		csInterpolationFormatDel = { link = "PrismaAquaBold" },
		rustSigil = { link = "PrismaOrange" },
		rustEscape = { link = "PrismaAqua" },
		rustStringContinuation = { link = "PrismaAqua" },
		rustEnum = { link = "PrismaAqua" },
		rustStructure = { link = "PrismaAqua" },
		rustModPathSep = { link = "PrismaFg2" },
		rustCommentLineDoc = { link = "Comment" },
		rustDefault = { link = "PrismaAqua" },
		ocamlOperator = { link = "PrismaFg1" },
		ocamlKeyChar = { link = "PrismaOrange" },
		ocamlArrow = { link = "PrismaOrange" },
		ocamlInfixOpKeyword = { link = "PrismaRed" },
		ocamlConstructor = { link = "PrismaOrange" },
		LspSagaCodeActionTitle = { link = "Title" },
		LspSagaCodeActionBorder = { link = "PrismaFg1" },
		LspSagaCodeActionContent = { fg = palette.green, bold = config.bold },
		LspSagaLspFinderBorder = { link = "PrismaFg1" },
		LspSagaAutoPreview = { link = "PrismaOrange" },
		TargetWord = { fg = palette.blue, bold = config.bold },
		FinderSeparator = { link = "PrismaAqua" },
		LspSagaDefPreviewBorder = { link = "PrismaBlue" },
		LspSagaHoverBorder = { link = "PrismaOrange" },
		LspSagaRenameBorder = { link = "PrismaBlue" },
		LspSagaDiagnosticSource = { link = "PrismaOrange" },
		LspSagaDiagnosticBorder = { link = "PrismaPurple" },
		LspSagaDiagnosticHeader = { link = "PrismaGreen" },
		LspSagaSignatureHelpBorder = { link = "PrismaGreen" },
		SagaShadow = { link = "PrismaBg0" },
		DashboardShortCut = { link = "PrismaOrange" },
		DashboardHeader = { link = "PrismaAqua" },
		DashboardCenter = { link = "PrismaYellow" },
		DashboardFooter = { fg = palette.purple, italic = true },
		MasonHighlight = { link = "PrismaAqua" },
		MasonHighlightBlock = { fg = palette.bg1, bg = palette.blue },
		MasonHighlightBlockBold = { fg = palette.bg1, bg = palette.blue, bold = true },
		MasonHighlightSecondary = { fg = palette.yellow },
		MasonHighlightBlockSecondary = { fg = palette.bg1, bg = palette.yellow },
		MasonHighlightBlockBoldSecondary = { fg = palette.bg1, bg = palette.yellow, bold = true },
		MasonHeader = { link = "MasonHighlightBlockBoldSecondary" },
		MasonHeaderSecondary = { link = "MasonHighlightBlockBold" },
		MasonMuted = { fg = palette.fg4 },
		MasonMutedBlock = { fg = palette.bg1, bg = palette.fg4 },
		MasonMutedBlockBold = { fg = palette.bg1, bg = palette.fg4, bold = true },
		LspInlayHint = { link = "comment" },
		CarbonFile = { link = "PrismaFg1" },
		CarbonExe = { link = "PrismaYellow" },
		CarbonSymlink = { link = "PrismaAqua" },
		CarbonBrokenSymlink = { link = "PrismaRed" },
		CarbonIndicator = { link = "PrismaGray" },
		CarbonDanger = { link = "PrismaRed" },
		CarbonPending = { link = "PrismaYellow" },
		NoiceCursor = { link = "TermCursor" },
		NotifyDEBUGBorder = { link = "PrismaBlue" },
		NotifyDEBUGIcon = { link = "PrismaBlue" },
		NotifyDEBUGTitle = { link = "PrismaBlue" },
		NotifyERRORBorder = { link = "PrismaRed" },
		NotifyERRORIcon = { link = "PrismaRed" },
		NotifyERRORTitle = { link = "PrismaRed" },
		NotifyINFOBorder = { link = "PrismaAqua" },
		NotifyINFOIcon = { link = "PrismaAqua" },
		NotifyINFOTitle = { link = "PrismaAqua" },
		NotifyTRACEBorder = { link = "PrismaGreen" },
		NotifyTRACEIcon = { link = "PrismaGreen" },
		NotifyTRACETitle = { link = "PrismaGreen" },
		NotifyWARNBorder = { link = "PrismaYellow" },
		NotifyWARNIcon = { link = "PrismaYellow" },
		NotifyWARNTitle = { link = "PrismaYellow" },
		IlluminatedWordText = { link = "LspReferenceText" },
		IlluminatedWordRead = { link = "LspReferenceRead" },
		IlluminatedWordWrite = { link = "LspReferenceWrite" },
		TSRainbowRed = { fg = palette.red },
		TSRainbowOrange = { fg = palette.orange },
		TSRainbowYellow = { fg = palette.yellow },
		TSRainbowGreen = { fg = palette.green },
		TSRainbowBlue = { fg = palette.blue },
		TSRainbowViolet = { fg = palette.purple },
		TSRainbowCyan = { fg = palette.cyan },
		DapBreakpointSymbol = { fg = palette.red, bg = palette.bg1 },
		DapStoppedSymbol = { fg = palette.green, bg = palette.bg1 },
		DapUIBreakpointsCurrentLine = { link = "PrismaYellow" },
		DapUIBreakpointsDisabledLine = { link = "PrismaGray" },
		DapUIBreakpointsInfo = { link = "PrismaAqua" },
		DapUIBreakpointsLine = { link = "PrismaYellow" },
		DapUIBreakpointsPath = { link = "PrismaBlue" },
		DapUICurrentFrameName = { link = "PrismaPurple" },
		DapUIDecoration = { link = "PrismaPurple" },
		DapUIEndofBuffer = { link = "PrismaBg2" },
		DapUIFloatBorder = { link = "PrismaAqua" },
		DapUILineNumber = { link = "PrismaYellow" },
		DapUIModifiedValue = { link = "PrismaRed" },
		DapUIPlayPause = { fg = palette.green, bg = palette.bg1 },
		DapUIRestart = { fg = palette.green, bg = palette.bg1 },
		DapUIScope = { link = "PrismaBlue" },
		DapUISource = { link = "PrismaFg1" },
		DapUIStepBack = { fg = palette.blue, bg = palette.bg1 },
		DapUIStepInto = { fg = palette.blue, bg = palette.bg1 },
		DapUIStepOut = { fg = palette.blue, bg = palette.bg1 },
		DapUIStepOver = { fg = palette.blue, bg = palette.bg1 },
		DapUIStop = { fg = palette.red, bg = palette.bg1 },
		DapUIStoppedThread = { link = "PrismaBlue" },
		DapUIThread = { link = "PrismaBlue" },
		DapUIType = { link = "PrismaOrange" },
		DapUIUnavailable = { link = "PrismaGray" },
		DapUIWatchesEmpty = { link = "PrismaGray" },
		DapUIWatchesError = { link = "PrismaRed" },
		DapUIWatchesValue = { link = "PrismaYellow" },
		DapUIWinSelect = { link = "PrismaYellow" },
		NeogitDiffDelete = { link = "DiffDelete" },
		NeogitDiffAdd = { link = "DiffAdd" },
		NeogitHunkHeader = { link = "WinBar" },
		NeogitHunkHeaderHighlight = { link = "WinBarNC" },
		DiffviewStatusModified = { link = "PrismaGreenBold" },
		DiffviewFilePanelInsertions = { link = "PrismaGreenBold" },
		DiffviewFilePanelDeletions = { link = "PrismaRedBold" },
		WhichKeyFloat = { bg = palette.bg2 },
		["@comment"] = { link = "Comment" },
		["@none"] = { bg = "NONE", fg = "NONE" },
		["@preproc"] = { link = "PreProc" },
		["@define"] = { link = "Define" },
		["@operator"] = { link = "Operator" },
		["@punctuation.delimiter"] = { link = "Delimiter" },
		["@punctuation.bracket"] = { link = "Delimiter" },
		["@punctuation.special"] = { link = "Delimiter" },
		["@string"] = { link = "String" },
		["@string.regex"] = { link = "String" },
		["@string.escape"] = { link = "SpecialChar" },
		["@string.special"] = { link = "SpecialChar" },
		["@character"] = { link = "Character" },
		["@character.special"] = { link = "SpecialChar" },
		["@boolean"] = { link = "Boolean" },
		["@number"] = { link = "Number" },
		["@float"] = { link = "Float" },
		["@function"] = { link = "Function" },
		["@function.builtin"] = { link = "Special" },
		["@function.call"] = { link = "Function" },
		["@function.macro"] = { link = "Macro" },
		["@method"] = { link = "Function" },
		["@method.call"] = { link = "Function" },
		["@constructor"] = { link = "Special" },
		["@parameter"] = { link = "Identifier" },
		["@keyword"] = { link = "Keyword" },
		["@keyword.function"] = { link = "Keyword" },
		["@keyword.operator"] = { link = "PrismaRed" },
		["@keyword.return"] = { link = "Keyword" },
		["@conditional"] = { link = "Conditional" },
		["@repeat"] = { link = "Repeat" },
		["@debug"] = { link = "Debug" },
		["@label"] = { link = "Label" },
		["@include"] = { link = "Include" },
		["@exception"] = { link = "Exception" },
		["@type"] = { link = "Type" },
		["@type.builtin"] = { link = "Type" },
		["@type.definition"] = { link = "Typedef" },
		["@type.qualifier"] = { link = "Type" },
		["@storageclass"] = { link = "StorageClass" },
		["@attribute"] = { link = "PreProc" },
		["@field"] = { link = "Identifier" },
		["@property"] = { link = "Identifier" },
		["@variable"] = { link = "PrismaFg1" },
		["@variable.builtin"] = { link = "Special" },
		["@constant"] = { link = "Constant" },
		["@constant.builtin"] = { link = "Special" },
		["@constant.macro"] = { link = "Define" },
		["@namespace"] = { link = "PrismaFg1" },
		["@symbol"] = { link = "Identifier" },
		["@text"] = { link = "PrismaFg1" },
		["@text.strong"] = { bold = config.bold },
		["@text.emphasis"] = { italic = config.italic.emphasis },
		["@text.underline"] = { underline = config.underline },
		["@text.strike"] = { strikethrough = config.strikethrough },
		["@text.title"] = { link = "Title" },
		["@text.literal"] = { link = "String" },
		["@text.uri"] = { link = "Underlined" },
		["@text.math"] = { link = "Special" },
		["@text.environment"] = { link = "Macro" },
		["@text.environment.name"] = { link = "Type" },
		["@text.reference"] = { link = "Constant" },
		["@text.todo"] = { link = "Todo" },
		["@text.note"] = { link = "SpecialComment" },
		["@text.note.comment"] = { fg = palette.purple, bold = config.bold },
		["@text.warning"] = { link = "WarningMsg" },
		["@text.danger"] = { link = "ErrorMsg" },
		["@text.danger.comment"] = { fg = palette.fg0, bg = palette.red, bold = config.bold },
		["@text.diff.add"] = { link = "diffAdded" },
		["@text.diff.delete"] = { link = "diffRemoved" },
		["@tag"] = { link = "Tag" },
		["@tag.attribute"] = { link = "Identifier" },
		["@tag.delimiter"] = { link = "Delimiter" },
		["@punctuation"] = { link = "Delimiter" },
		["@macro"] = { link = "Macro" },
		["@structure"] = { link = "Structure" },
		["@lsp.type.class"] = { link = "@type" },
		["@lsp.type.comment"] = {}, -- do not overwrite comments
		["@lsp.type.decorator"] = { link = "@macro" },
		["@lsp.type.enum"] = { link = "@type" },
		["@lsp.type.enumMember"] = { link = "@constant" },
		["@lsp.type.function"] = { link = "@function" },
		["@lsp.type.interface"] = { link = "@constructor" },
		["@lsp.type.macro"] = { link = "@macro" },
		["@lsp.type.method"] = { link = "@method" },
		["@lsp.type.namespace"] = { link = "@namespace" },
		["@lsp.type.parameter"] = { link = "@parameter" },
		["@lsp.type.property"] = { link = "@property" },
		["@lsp.type.struct"] = { link = "@type" },
		["@lsp.type.type"] = { link = "@type" },
		["@lsp.type.typeParameter"] = { link = "@type.definition" },
		["@lsp.type.variable"] = { link = "@variable" },
	}

	for group, hl in pairs(config.overrides) do
		if groups[group] then
			-- "link" should not mix with other configs (:h hi-link)
			groups[group].link = nil
		end

		groups[group] = vim.tbl_extend("force", groups[group] or {}, hl)
	end

	return groups
end
